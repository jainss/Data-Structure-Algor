class Solution {
public:
    long long int mod=1e9+7;
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<long long int,long long int>>adj[n];
        for(auto it:roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<long long int>dist(n,1e12);
        vector<long long int>ways(n,0);
        priority_queue<pair<long long int,long long int>,vector<pair<long long int,long long int>>,greater<pair<long long int,long long int>>>pq;
        pq.push({0,0});
        dist[0]=0;
        ways[0]=1;
        while(!pq.empty()){
            long long int dis=pq.top().first;
            long long int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                long long int adjnode=it.first;
                long long int wt=it.second;
                if(dis+wt<dist[adjnode]){
                    ways[adjnode]=ways[node];
                    dist[adjnode]=dis+wt;
                    pq.push({dist[adjnode],adjnode});
                }else if(dis+wt==dist[adjnode]){
                    ways[adjnode]=(ways[adjnode]+ways[node])%mod;
                }
            }
        }
        return ways[n-1];
    }
};


https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/
