class Solution {
public:
    void dfs(vector<vector<int>>& grid2,vector<vector<int>>& grid1,int i,int j,int &f){
        if(i>=grid1.size() || i<0 || j>=grid1[0].size() || j<0 || grid2[i][j]==0){
            return ;
        }
        if(grid1[i][j]!=grid2[i][j]){
            f=0;
        }
        grid2[i][j]=0;
        dfs(grid2,grid1,i+1,j,f);
        dfs(grid2,grid1,i,j+1,f);
        dfs(grid2,grid1,i-1,j,f);
        dfs(grid2,grid1,i,j-1,f);
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int ans=0;
        for(int i=0;i<grid1.size();i++){
            for(int j=0;j<grid1[0].size();j++){
               if(grid2[i][j]==1){
                  int f=1;
                  dfs(grid2,grid1,i,j,f);
                  if(f){
                      ans++;
                  }
               }
            }
        }
        return ans;
    }
};

https://leetcode.com/problems/count-sub-islands
