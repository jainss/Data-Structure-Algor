class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>>gr[n+1];
        for(int i=0;i<times.size();i++){
            gr[times[i][0]].push_back({times[i][2],times[i][1]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>dist(n+1,1e9);
        dist[k]=0;
        pq.push({0,k});
        pair<int,int> node;
        while(!pq.empty()){
            node=pq.top();
            pq.pop();
            int no=node.second;
            for(auto it: gr[no]){
                if(dist[it.second]>dist[no]+it.first){
                    dist[it.second]=dist[no]+it.first;
                    pq.push({dist[it.second],it.second});
                }
            }
        }
        int ans=0;
        for(int i=1;i<n+1;i++){
            ans=max(ans,dist[i]);
        }
        if(ans==1e9){
            return -1;
        }
        return ans;
    }
};
