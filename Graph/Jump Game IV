class Solution {
public:
    int minJumps(vector<int>& arr) {
        queue<int> q{{0}};
        const int n = arr.size();        
        vector<int> visited(n, 0);
        visited[0]=1;
        unordered_map<int, vector<int>> equals;
        for(int i = 0; i < n; i++) 
             equals[arr[i]].push_back(i);                
        for(int step = 0;!q.empty(); step++){
            for(int i = q.size(); i>0;i--){
                auto cur = q.front(); 
                q.pop();
                if(cur == n - 1) 
                    return step;                             
                if(cur+1<n&&!visited[cur+1]){
                    q.push(cur+1);
                    visited[cur+1]=1;
                }
                if(cur-1>=0&&!visited[cur-1]){
                    q.push(cur-1);
                    visited[cur-1]=1;
                }
                for(auto next: equals[arr[cur]])
                    if(!visited[next]) {
                         q.push(next);
                        visited[next]=1;
                    }
                equals[arr[cur]].clear(); // Important. Avoid later lookup equals arr[i]                
            }
        }
        return n - 1;
    }
};
