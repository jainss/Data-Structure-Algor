## Method -1 
SC: 0(n)
TC: 0(n^2)

class Solution {
public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<int>adj[n];
        for(auto its:edges){
            adj[its[0]].push_back(its[1]);
            adj[its[1]].push_back(its[0]);
        }
        vector<int>vec(n);
        for(int i=0;i<n;i++){
            queue<int>qu;
            vector<int>vis(n,0);
            int lvl=-1,sum=0;
            qu.push(i);
            vis[i]=1;
            while(!qu.empty()){
                int p=qu.size();
                lvl++;
                for(int i=0;i<p;i++){
                    int val=qu.front();
                    qu.pop();
                    sum+=lvl;
                    for(auto it:adj[val]){
                        if(vis[it]==0){
                            qu.push(it);
                            vis[it]=1;
                        }
                    }
                }
            }
            vec[i]=sum;
        }
        return vec;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




##Method 2 
SC: 0(n)
TC: 0(V+E)

class Solution {
public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<int>adj[n];
        for(auto its:edges){
            adj[its[0]].push_back(its[1]);
            adj[its[1]].push_back(its[0]);
        }
        vector<int>cnt(n,1);
        vector<int>ans(n,0);
        dfs(0,-1,adj,cnt,ans);
        dfs2(0,-1,adj,n,cnt,ans);
        return ans;
    }
    void dfs(int src,int par, vector<int>adj[],vector<int>&cnt,vector<int>&ans){
        for(auto it: adj[src]){
            if(it!=par){
                dfs(it,src,adj,cnt,ans);
                cnt[src]+=cnt[it];
                ans[src]+=ans[it]+cnt[it];
            }
        }
    }
    void dfs2(int src,int par,vector<int>adj[],int n,vector<int>&cnt,vector<int>&ans){
        for(auto it: adj[src]){
            if(it!=par){
                ans[it]+=ans[src]+(n-cnt[it])-(ans[it]+cnt[it]);
                dfs2(it,src,adj,n,cnt,ans);
            }
        }
    }
    
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

https://leetcode.com/problems/sum-of-distances-in-tree/
