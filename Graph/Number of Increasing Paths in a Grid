class Solution {
public:
    #define mod 1000000007
    #define ll long long int
    int dfs(int i,int j,vector<vector<int>>&grid,vector<vector<ll>>&dp,int n,int m){
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        ll ans=1;
        if(i+1<n and grid[i][j]<grid[i+1][j]){
            ans+=dfs(i+1,j,grid,dp,n,m);
            ans%=mod;
        }
        if(i-1>=0 and grid[i][j]<grid[i-1][j]){
            ans+=dfs(i-1,j,grid,dp,n,m);
            ans%=mod;
        }
        if(j+1<m and grid[i][j]<grid[i][j+1]){
            ans+=dfs(i,j+1,grid,dp,n,m);
            ans%=mod;
        }
        if(j-1>=0 and grid[i][j]<grid[i][j-1]){
            ans+=dfs(i,j-1,grid,dp,n,m);
            ans%=mod;
        }
        return dp[i][j]=ans;
    }
    int countPaths(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<vector<ll>>dp(n,vector<ll>(m,-1));
        ll ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ans+=dfs(i,j,grid,dp,n,m);
                ans%=mod;
            }
        }
        return ans;
    }
};

https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/
