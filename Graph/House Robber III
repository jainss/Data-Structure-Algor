/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<TreeNode*,int>mp;
    int memorize(TreeNode* root){
        if(mp.find(root)!=mp.end()){
            return mp[root];
        }
        return mp[root]=rob(root);
    }
    int rob(TreeNode* root) {
       if(root==NULL){
           return 0;
       }
        int take=root->val;
        if(root->left){
            take+=memorize(root->left->left);
            take+=memorize(root->left->right);
        }
        if(root->right){
            take+=memorize(root->right->left);
            take+=memorize(root->right->right);
        }
        int nontake=memorize(root->left)+memorize(root->right);
        return max(take,nontake);
    }
};



https://leetcode.com/problems/house-robber-iii/
