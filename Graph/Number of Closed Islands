class Solution {
public:
    void dfs(vector<vector<int>> &grid,int i,int j,int n,int m){
        if(i<0 || i>n-1 || j<0 || j>m-1)
            return ;
        if(grid[i][j]==1)
            return ;
        
        grid[i][j]=1;
        dfs(grid,i+1,j,n,m);
        dfs(grid,i,j+1,n,m);
        dfs(grid,i-1,j,n,m);
        dfs(grid,i,j-1,n,m);   
        
    }
    int closedIsland(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        int c=0;
        for(int i=0;i<n;i++){
            dfs(grid,i,0,n,m);
            dfs(grid,i,m-1,n,m);
        }
        for(int i=0;i<m;i++){
            dfs(grid,0,i,n,m);
            dfs(grid,n-1,i,n,m);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==0){
                   c++;
                   dfs(grid,i,j,n,m);
                }
            }
        }
        return c;
    }
};

https://leetcode.com/problems/number-of-closed-islands/
