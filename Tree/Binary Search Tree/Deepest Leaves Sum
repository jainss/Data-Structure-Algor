/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        queue<TreeNode*>qu;
        qu.push(root);
        vector<int>vec;
        while(!qu.empty()){
            int n=qu.size(),sum=0;
            for(int i=0;i<n;i++){
                sum+=qu.front()->val;
                if(qu.front()->left!=NULL){
                    qu.push(qu.front()->left);
                }
                if(qu.front()->right!=NULL){
                    qu.push(qu.front()->right);
                }
                qu.pop();
            }
            vec.push_back(sum);
        }
        return vec[vec.size()-1];
    }
};

https://leetcode.com/problems/deepest-leaves-sum/
