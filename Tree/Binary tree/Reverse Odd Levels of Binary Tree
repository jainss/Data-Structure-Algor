/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        bool isodd=false;
        queue<TreeNode*>qu;
        qu.push(root);
        while(!qu.empty()){
            int len=qu.size();
            vector<TreeNode*>vec;
            while(len--){
                TreeNode* node=qu.front();
                qu.pop();
                vec.push_back(node);
                if(node->left){
                    qu.push(node->left);
                }
                if(node->right){
                    qu.push(node->right);
                }
            }
            if(isodd){
                int i=0,j=vec.size()-1;
                while(i<j){
                    swap(vec[i]->val,vec[j]->val);
                    i++;
                    j--;
                }
                isodd=false;
            }else{
                isodd=true;
            }
        }
        return root;
    }
};




https://leetcode.com/problems/reverse-odd-levels-of-binary-tree/
