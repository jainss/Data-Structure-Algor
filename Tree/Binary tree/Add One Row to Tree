BFS 
TC : O(N)
SC : O(N)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth == 1) {
            TreeNode* newRoot = new TreeNode(val);
             newRoot -> left = root;
             return newRoot;
        }
    queue<TreeNode*> q;
    q.push(root);
    int level = 1;
    while(true) {
        if(level == depth - 1) break;
        int sz = q.size();
        while(sz--) {
            TreeNode* node = q.front();
            q.pop();  
            if(node -> left) {   
                q.push(node -> left); 
            }
            if(node -> right) {  
                q.push(node -> right);                
            }
        }
        level++;
    }
   while(!q.empty()){
            TreeNode* x = q.front();
            q.pop();
            TreeNode* clt = x->left;
            TreeNode* crt = x->right;
            TreeNode* nlt = new TreeNode(val);
            TreeNode* nrt = new TreeNode(val);
            x->left = nlt;
            x->right = nrt;
            nlt->left = clt;
            nrt->right = crt;
        }
    return root;
    }
};



//////////

DFS 

TC : O(N)
SC : O(1) or O(N) Recursive 


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int val, int depth){
        if(!root){
            return ;
        }
        if(depth==1){
            root->left=new TreeNode(val,root->left,NULL);
            root->right=new TreeNode(val,NULL,root->right);
        }
        solve(root->left,val,depth-1);
        solve(root->right,val,depth-1);
    }
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth == 1) {
            TreeNode* newRoot = new TreeNode(val);
             newRoot -> left = root;
             return newRoot;
        }
        solve(root,val,depth-1);
        return root;
    }
};


https://leetcode.com/problems/add-one-row-to-tree/
