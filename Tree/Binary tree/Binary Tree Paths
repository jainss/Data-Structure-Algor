/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string>vec;
    void solve(TreeNode* root,string ans){
        if(root){
            if(ans.size()==0){
                ans=ans+to_string(root->val);
            }
            else{
                ans=ans+"->";
                ans+=to_string(root->val);
            }
            if(root->left==NULL&&root->right==NULL){
                vec.push_back(ans);
                return;
            }
            solve(root->left,ans);
            solve(root->right,ans);
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        if(root==NULL){
            return {};
        }
        solve(root,"");
        return vec;
    }
};

https://leetcode.com/problems/binary-tree-paths/
