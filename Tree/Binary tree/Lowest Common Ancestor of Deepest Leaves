TC : O(N)
SC : O(1)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<TreeNode*, int>findlcaDeepLeave(TreeNode *root){
        if(!root){
            return {NULL, 0};
        }
        pair<TreeNode*, int> left = findlcaDeepLeave(root->left);
        pair<TreeNode*, int> right = findlcaDeepLeave(root->right);
        if(left.second == right.second){
            return {root, 1+left.second};
        }else if(left.second>right.second){
            return {left.first, 1+left.second};
        }else{
            return {right.first, 1+right.second};
        }
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        pair<TreeNode*, int>ans = findlcaDeepLeave(root);
        return ans.first;
    }
};


https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/description/?envType=daily-question&envId=2025-04-04
