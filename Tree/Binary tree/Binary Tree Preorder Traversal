/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>vec;
        if(root==NULL){
            return {};
        }
        stack<TreeNode*>qu;
        qu.push(root);
        while(qu.empty()==false){
           TreeNode* t= qu.top();
            qu.pop();
           vec.push_back(t->val);
            if(t->right!=NULL){
                qu.push(t->right);
            }
            if(t->left!=NULL){
                qu.push(t->left);
            }
        }
        return vec;
    }
};


// https://leetcode.com/problems/binary-tree-preorder-traversal/
