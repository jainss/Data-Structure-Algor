class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n=nums.size(),ans=1,mx=1;
        vector<int>dp(n,1),cur(n,1);
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]>nums[j] and dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                    cur[i]=cur[j];
                }else if(nums[i]>nums[j] and dp[i]==dp[j]+1){
                    cur[i]+=cur[j];
                }
            }
            mx=max(mx,dp[i]);
        }
        int c=0;
        for(int i=0;i<n;i++){
            if(dp[i]==mx){
                c+=cur[i];
            }
        }
        return c;
    }
};



https://leetcode.com/problems/number-of-longest-increasing-subsequence/
