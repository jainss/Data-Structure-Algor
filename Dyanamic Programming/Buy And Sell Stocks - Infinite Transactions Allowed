Method -1

class Solution {
public:
    int solve(int i,int buy,vector<int>&prices,vector<vector<int>>&dp){
        if(i==prices.size()){
            return 0;
        }
        if(dp[i][buy]!=-1){
            return dp[i][buy];
        }
        if(buy==1){
            return dp[i][buy]=max(solve(i+1,0,prices,dp)-prices[i],solve(i+1,1,prices,dp));
        }else{
            return dp[i][buy]=max(solve(i+1,0,prices,dp),solve(i+1,1,prices,dp)+prices[i]);
        }
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return solve(0,1,prices,dp);
    }
};


method -2

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        dp[n][0]=dp[n][1]=0;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                int profit=0;
                if(j){
                    profit=max(dp[i+1][0]-prices[i],dp[i+1][1]);
                }else{
                    profit=max(dp[i+1][1]+prices[i],dp[i+1][0]);
                }
                dp[i][j]=profit;
            }
        }
        return dp[0][1];
    }
};


method -3


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int>prev(2,0),cur(2,0);
        prev[0]=prev[1]=0;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                int profit=0;
                if(j){
                    profit=max(prev[0]-prices[i],prev[1]);
                }else{
                    profit=max(prev[1]+prices[i],prev[0]);
                }
                cur[j]=profit;
            }
            prev=cur;
        }
        return prev[1];
    }
};


method -4

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int sp=0,bp=0,profit=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]>prices[i-1]){
                sp++;
            }else{
                profit+=prices[sp]-prices[bp];
                sp=bp=i;
            }
        }
        profit+=prices[sp]-prices[bp];
        return profit;
    }
};

URL: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
