class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        int sum=0;
        for(auto it:stones){
            sum+=it;
        }
        int n=stones.size();
        bool dp[n+1][sum+1];
        memset(dp,false,sizeof(dp));
        for(int i=0;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(i==0&&j==0){
                    dp[i][j]=true;
                }else if(i==0){
                    dp[i][j]=false;
                }else if(j==0){
                    dp[i][j]=true;
                }else{
                    if(stones[i-1]<=j){
                        dp[i][j]=dp[i-1][j]||dp[i-1][j-stones[i-1]];
                    }else{
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
        }
        
        vector<int>vec;
        for(int i=0;i<=sum/2;i++){
            if(dp[n][i]==true){
                vec.push_back(i);
            }
        }
        
        int mx=INT_MAX;
        for(auto it:vec){
            mx=min(mx,sum-(2*it));
        }
        return mx;
    }
};


URL: https://leetcode.com/problems/last-stone-weight-ii/submissions/
