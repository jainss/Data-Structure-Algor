class Solution {
public:
    int rob1(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        dp[0]=nums[0];
        for(int i=1;i<n;i++){
            int pick=nums[i];
            if(i-2>=0){
                pick+=dp[i-2];
            }
            int unpick=dp[i-1];
            dp[i]=max(pick,unpick);
        }
        return dp[n-1];
    }
    int rob(vector<int>& nums) {
        if(nums.size()==1){
            return nums[0];
        }
        vector<int>temp1,temp2;
        for(int i=0;i<nums.size();i++){
            if(i!=0){
                temp1.push_back(nums[i]);
            }
            if(i!=nums.size()-1){
                temp2.push_back(nums[i]);
            }
        }
        return max(rob1(temp1),rob1(temp2));
    }
};

https://leetcode.com/problems/house-robber-ii/
