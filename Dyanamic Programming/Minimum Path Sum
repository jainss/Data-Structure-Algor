class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
     vector<vector<int>>dp;
        int n=grid.size();
        int m=grid[0].size();
     for(int i=0;i<n;i++){
        vector<int>an(m,0);
        dp.push_back(an);
     }
     for(int i=n-1;i>=0;i--){
         for(int j=m-1;j>=0;j--){
             if(i==grid.size()-1&&j==grid[0].size()-1){
                 dp[i][j]=grid[i][j];
             }else if(i==grid.size()-1){
                 dp[i][j]=dp[i][j+1]+grid[i][j];
             }else if(j==grid[0].size()-1){
                 dp[i][j]=dp[i+1][j]+grid[i][j];
             }else{
                 dp[i][j]=min(dp[i+1][j],dp[i][j+1])+grid[i][j];
             }
         }
     }
        return dp[0][0];
    }
};


URL: https://leetcode.com/problems/minimum-path-sum/
