class Solution {
public:
    map<string,bool>mp;
    
    bool solve(int l1,int l2,int l3,int p1,int p2,int p3,string s1,string s2,string s3){
        if(p3==l3){
            return (l2==p2&&l1==p1)?true:false;
        }
        string key=to_string(p1)+"*"+to_string(p2)+"*"+to_string(p3);
        if(mp.find(key)!=mp.end()){
            return mp[key];
        }
        if(p1==l1){
            return mp[key]=(s2[p2]==s3[p3])?solve(l1,l2,l3,p1,p2+1,p3+1,s1,s2,s3):false;
        }
        if(p2==l2){
            return mp[key]=(s1[p1]==s3[p3])?solve(l1,l2,l3,p1+1,p2,p3+1,s1,s2,s3):false;
        }
        bool one=false,two=false;
        if(s1[p1]==s3[p3]){
           one = solve(l1,l2,l3,p1+1,p2,p3+1,s1,s2,s3);
        }
        if(s2[p2]==s3[p3]){
            two=solve(l1,l2,l3,p1,p2+1,p3+1,s1,s2,s3);
        }
        return mp[key]=one||two;
    }
    
    bool isInterleave(string s1, string s2, string s3) {
        int l1=s1.length();
        int l2=s2.length();
        int l3=s3.length();
        if(l1+l2!=l3){
            return false;
        }
        return solve(l1,l2,l3,0,0,0,s1,s2,s3);
    }
};
