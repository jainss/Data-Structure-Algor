class Solution {
public:
    
    
    int minCost(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int>dp(n+1,INT_MAX);
        dp[n]=0;
        for(int i=n-1;i>=0;i--){
            unordered_map<int,int>mp;
            int c=0;
            for(int j=i;j<n;j++){
                mp[nums[j]]++;
                if(mp[nums[j]]==2){
                    c+=2;
                }
                if(mp[nums[j]]>2){
                    c++;
                }
                dp[i]=min(dp[i],k+dp[j+1]+c);
            }
        }
         return dp[0];
    }
};


https://leetcode.com/problems/minimum-cost-to-split-an-array/
