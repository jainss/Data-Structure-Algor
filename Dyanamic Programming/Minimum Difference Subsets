int SubsetSum(vector<int> &nums,int n,int sum){
        int dp[nums.size()+1][sum+1];
        for(int i=0;i<nums.size()+1;i++){
            for(int j=0;j<sum+1;j++){
                if(i==0 and j==0){
                    dp[i][j]=1;
                }else if(i==0){
                    dp[i][j]=0;
                }else if(j==0){
                    dp[i][j]=1;
                }else{
                    if(nums[i-1]<=j){
                        dp[i][j]=dp[i-1][j-nums[i-1]] or dp[i-1][j];
                    }else{
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
        }
        int ans=INT_MAX;
        for(int j=sum/2;j>=0;j--){
            if(dp[n][j]==true){
              return sum-2*j;   
            }
        }
        return ans;
    }
int Solution::solve(vector<int> &nums) {
    int sum=0;
    for(auto it:nums){
        sum+=it;
    }
    return SubsetSum(nums,nums.size(),abs(sum));
}



https://www.interviewbit.com/problems/minimum-difference-subsets/
