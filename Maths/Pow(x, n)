method -1

class Solution {
public:
    double solve(double x,int n){
        if(n==0){
            return 1.0;
        }
        if(n<0){
            return 1.0/x * solve(1.0/x, -(n + 1));
        }
        if(n%2==0){
            double ans=solve(x,n/2.0);
            return ans*ans;
        }else{
            double ans=solve(x,n/2.0);
           return x*ans*ans;
        }
        
    }
    double myPow(double x, int n) {
        // if(x<0 and n==INT_MAX){
        //     if(n%2==0)
        //         return 1;
        //     else
        //         return -1;
        // }
        // if(n==INT_MAX and x<1){
        //     return 0;
        // }
        // if(n==INT_MAX and x>=1){
        //     return 1;
        // }
        double ans= solve(x,abs(n));
        if(n<0){
           ans=1.0/ans;
        }
        return ans;
    }
};

method -2

class Solution {
public:
    double myPow(double x, int n) {
        double ans=1.0;
        long long int num=n;
        if(num<0)
            num*=-1;
        while(num!=0){
            if(num%2){
                ans*=x;
                num-=1;
            }else{
                x*=x;
                num/=2;
            }
        }
        if(n<0)
            ans=(double)1/(double)ans;
        return ans;
    }
};

https://leetcode.com/problems/powx-n/
