class Solution {
public:
    int MAH(vector<int>& heights) {
        stack<pair<int,int>>st;
        vector<int>left;
        stack<pair<int,int>>st2;
        vector<int>right;
        int boundry=-1;
        for(int i=0;i<heights.size();i++){
            if(st.size()==0){
                left.push_back(boundry);
            }else if(st.size()>0&&st.top().first<heights[i]){
                left.push_back(st.top().second);
            }else if(st.size()>0&&st.top().first>=heights[i]){
                while(st.size()>0&&st.top().first>=heights[i]){
                    st.pop();
                }
                if(st.size()==0){
                    left.push_back(boundry);
                }else{
                    left.push_back(st.top().second);
                }
            }
            st.push({heights[i],i});
        }
        boundry=heights.size();
        for(int i=heights.size()-1;i>=0;i--){
            if(st2.size()==0){
                right.push_back(boundry);
            }else if(st2.size()>0&&st2.top().first<heights[i]){
                right.push_back(st2.top().second);
            }else if(st2.size()>0&&st2.top().first>=heights[i]){
                while(st2.size()>0&&st2.top().first>=heights[i]){
                    st2.pop();
                }
                if(st2.size()==0){
                    right.push_back(boundry);
                }else{
                    right.push_back(st2.top().second);
                }
            }
            st2.push({heights[i],i});
        }
        reverse(right.begin(),right.end());
        int ans=0;
        for(int i=0;i<heights.size();i++){
            int area=heights[i]*(right[i]-left[i]-1);
            ans=max(ans,area);
        }
        return ans;
    }
    
    int maximalRectangle(vector<vector<char>>& matrix) {
        int m=matrix.size();
        if(m==0) return 0;
        int n=matrix[0].size(), result=0;
        vector<int> histogram(n, 0);
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j]=='1')
                    histogram[j]+=1;
                else
                    histogram[j]=0;
            }
            
            result = max(result, MAH(histogram));
        }
        return result;
    }
};
