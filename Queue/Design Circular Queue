class MyCircularQueue {
public:
    int rear=-1;
    int front=-1;
    int cap;
    int *dq;
    MyCircularQueue(int k) {
        cap=k;
        dq=new int[k];
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return false;
        }
        if(isEmpty()){
            front++;
        }
        rear=(rear+1)%cap;
        dq[rear]=value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        if(front==rear){
            front=rear=-1;
        }else{
            front=(front+1)%cap;
        }
        return true;
        
    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        return dq[front];
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        return dq[rear];
    }
    
    bool isEmpty() {
        return front==-1;
    }
    
    bool isFull() {
        return ((rear+1)%cap)==front;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
 
 
 
 
 
 https://leetcode.com/problems/design-circular-queue/
