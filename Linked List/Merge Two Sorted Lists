Recursion method :
  
class Solution {
public:
    ListNode* solve(ListNode* l1, ListNode* l2){
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        if(l1->val>l2->val){
            swap(l1,l2);
        }
        l1->next=solve(l1->next,l2);
        return l1;
    }
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        return solve(l1,l2);
    }
}; 

Iterative Method: 

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        ListNode* ans= new ListNode(-1);
        ListNode* tail=ans;
        while(l1!=NULL&&l2!=NULL){
            if(l1->val<l2->val){
               tail->next=l1;
               tail=l1;
               l1=l1->next;
            }else{
                tail->next=l2;
                tail=l2;
                l2=l2->next;
            }
        }
        if(l1==NULL){
            tail->next=l2;
        }else{
            tail->next=l1;
        }
        return ans->next;
    }
};
