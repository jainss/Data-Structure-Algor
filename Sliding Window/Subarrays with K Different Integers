class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = (int)nums.size(), ans1 = 0, l = 0, ans2 = 0;
        map<int, int> mp;
        for(int r = 0; r < n; r++){
            mp[nums[r]]++;
            while(mp.size() >= k){
                if(--mp[nums[l]] == 0) mp.erase(nums[l]);
                l++;
            }
            ans1 += (r - l + 1);
        }
        l = 0, mp.clear();
        for(int r = 0; r < n; r++){
            mp[nums[r]]++;
            while(mp.size() > k){
                if(--mp[nums[l]] == 0) mp.erase(nums[l]);
                l++;
            }
            ans2 += (r - l + 1);
        }
        return ans2 - ans1;
    }
};

https://leetcode.com/problems/subarrays-with-k-different-integers/
