class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,pair<int,int>>>pq;
        for(auto it:points){
            int sum=it[0]*it[0]+it[1]*it[1];
            pq.push({sum,{it[0],it[1]}});
            if(pq.size()>k){
                pq.pop();
            }
        }
        vector<vector<int>>ans;
        while(!pq.empty()){
            vector<int>vec;
            vec.push_back(pq.top().second.first);
            vec.push_back(pq.top().second.second);
            pq.pop();
            ans.push_back(vec);
        }
        return ans;
    }
};

https://leetcode.com/problems/k-closest-points-to-origin/ 
