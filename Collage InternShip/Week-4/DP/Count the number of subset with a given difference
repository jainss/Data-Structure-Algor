int subsetSum(int a[], int n, int sum)
{
    int dp[n + 1][sum + 1];
    dp[0][0] = 1;
    for (int i = 1; i <= sum; i++)
        dp[0][i] = 0;
    for (int i = 1; i <= n; i++)
        dp[i][0] = 1;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= sum; j++)
        {
            if (a[i - 1] <= j)
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i - 1]]; 
            else
                  dp[i][j] = dp[i - 1][j];
        }
    }

    return dp[n][sum];
}

int countWithGivenSum(int arr[ ], int n, int diff)
{   
     int sum=0;
    for(int i=0;i<n;i++)
         sum+=nums[i]
	 
	 int reqSum=(diff+sum)/2;
	 return subsetSum(arr,n,reqSum);
}


Memorization 


int mod=(int)(1e9+7);
int countSubsets(vector<int>& arr, int n, int k,vector<vector<int>>&dp) {
    if(n==0){
        if(k==0 and arr[0]==0)
            return 2;
        if(k==0 or arr[0]==k)
            return 1;
        return 0;
    }
    if(dp[n][k]!=-1)
       return dp[n][k];
    int pick=0;
    int nonpick=countSubsets(arr,n-1,k,dp);
    if(k>=arr[n]){
        pick=countSubsets(arr,n-1,k-arr[n],dp);
    }
    return dp[n][k]=(pick+nonpick)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int sum = 0;
    for(int x : arr)    
        sum += x;
    if(d > sum || (sum + d) % 2)    return 0;
    int tot=(sum + d) / 2;
     vector<vector<int>>dp(n,vector<int>(tot+1,-1));
    return countSubsets(arr, n-1, (sum + d) / 2,dp);
}

https://www.codingninjas.com/codestudio/problems/partitions-with-given-difference_3751628?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=0


URL: https://www.youtube.com/watch?v=ot_XBHyqpFc&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=11&ab_channel=AdityaVerma
