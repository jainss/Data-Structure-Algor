##By Recursion 

class Solution {
public:    
    int maxLen(string s1, string s2, int n, int m)
    {
        if (n == 0 || m == 0)
            return 0;
        
        if (s1[n - 1] == s2[m - 1])
            return 1 + maxLen(s1, s2, n - 1, m - 1);
        else
            return max(maxLen(s1, s2, n, m - 1),maxLen(s1, s2, n - 1, m));
    }
        
    int longestCommonSubsequence(string s1, string s2) 
    {
        return maxLen(s1, s2, s1.length(), s2.length());
    }
};


##By Memorization 

class Solution {
public: 
    int a[1001][1001]={-1};
    int maxLen(string s1, string s2, int n, int m)
    {
        if (n == 0 || m == 0)
            return 0;
        if(a[n][m]!=0){
            return a[n][m];
        }
        if (s1[n - 1] == s2[m - 1])
            return a[n][m]=(1 + maxLen(s1, s2, n - 1, m - 1));
        else
            return a[n][m]=max(maxLen(s1, s2, n, m - 1),maxLen(s1, s2, n - 1, m));
    }
        
    int longestCommonSubsequence(string s1, string s2) 
    {
        return maxLen(s1, s2, s1.length(), s2.length());
    }
};

## By Top Down Dp 

class Solution {
public: 
    int dp[1001][1001]={0};
    int maxLen(string s1, string s2, int n, int m){
        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
        
    int longestCommonSubsequence(string s1, string s2) 
    {
        return maxLen(s1, s2, s1.length(), s2.length());
    }
};


https://leetcode.com/problems/longest-common-subsequence/submissions/
