Method -1 

with out dp approch 


class Solution {
public:
    int lenofsubstring(string s,int i,int j){
        if(i>j){
            return 0;
        }
        while(i>=0 and j<s.size() and s[i]==s[j]){
            i--;
            j++;
        }
        return j-i-1;
    }
    string longestPalindrome(string s) {
        if(s.size()<1){
            return "";
        }
        int start=0,end=0;
        for(int i=0;i<s.size();i++){
            int len1=lenofsubstring(s,i,i);
            int len2=lenofsubstring(s,i,i+1);
            int len=max(len1,len2);
            if(len>end-start+1){
                start=i-((len-1)/2);
                end=i+(len/2);
            } 
        }
        string str="";
        for(int i=start;i<=end;i++){
            str+=s[i];
        }
        return str;
    }
};


Method -2:
 By DP solution 
 
 
 class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        int dp[n][n];
        memset(dp,0,sizeof(dp));
        int maxlen = 1;
        for(int i=0;i<n;i++)
            dp[i][i]=1;
        int start=0;
        for(int i=0;i<n-1;i++){
            if(s[i]==s[i+1]){
                dp[i][i+1]=1;
                maxlen=2;
                start=i;
            }
        }
        for(int k=3;k<=n;k++){
            for(int i=0;i<=n-k;i++){
                int j=i+k-1;
                if(dp[i+1][j-1]==1 and s[i]==s[j]){
                    dp[i][j]=1;
                    if(k>maxlen){
                        maxlen=k;
                        start=i;
                    }
                }
            }
        }
        return s.substr(start,maxlen);
    }
};



https://leetcode.com/problems/longest-palindromic-substring/
