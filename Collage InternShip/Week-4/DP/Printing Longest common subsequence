#include <bits/stdc++.h>
using namespace std;

vector<int> longestCommonSubsequence(vector<int> a, vector<int> b) {
    int n=a.size(),m=b.size();
    int dp[n+1][m+1];
    memset(dp,0, sizeof(dp));
    for(int i=1;i<n+1;i++){
        for(int j=1;j<m+1;j++){
            if(a[i-1]==b[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    int i=n,j=m;
    vector<int>ans;
    while(i>0&&j>0){
        if(a[i-1]==b[j-1]){
            ans.push_back(a[i-1]);
            i--;
            j--;
        }else{
            if(dp[i-1][j]>dp[i][j-1]){
                i--;
            }else{
                j--;
            }
        }
    }
    reverse(ans.begin(),ans.end());
    return ans;
}

int main(){
  int n,m;
  cin>>n>>m;
  vector<int>v1(n),v2(m);
  for(int i=0;i<n;i++){
      cin>>v1[i];
  }
  for(int i=0;i<m;i++){
      cin>>v2[i];
  }
  vector<int>ans=longestCommonSubsequence(v1,v2);
  for(int i=0;i<ans.size();i++){
      cout<<ans[i]<<" ";
  }
}

https://www.hackerrank.com/challenges/dynamic-programming-classics-the-longest-common-subsequence/problem
