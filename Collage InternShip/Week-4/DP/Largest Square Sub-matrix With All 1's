Another Name : Maximal Square :)

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int dp[n][m];
        for(int i=0;i<n;i++){
         for(int j=0;j<m;j++){
            if(matrix[i][j]=='0'){
                dp[i][j]=0;
            }
         }
        }
        for(int i=0;i<n;i++){
            if(matrix[i][m-1]=='0'){
                dp[i][m-1]=0;
            }else{
                dp[i][m-1]=1;
            }
        }for(int i=0;i<m;i++){
           if(matrix[n-1][i]=='0'){
                dp[n-1][i]=0;
            }else{
                dp[n-1][i]=1;
            }
         }
        int ans=INT_MIN;
        for(int i=n-2;i>=0;i--){
          for(int j=m-2;j>=0;j--){
            if(matrix[i][j]!='0'){
                dp[i][j]=1+min(dp[i+1][j+1],min(dp[i][j+1],dp[i+1][j]));
                ans=max(ans,dp[i][j]);
            }
          }
        }
        for(int i=0;i<n;i++){
            ans=max(dp[i][m-1],ans);
        }
        for(int j=0;j<m;j++){
            ans=max(dp[n-1][j],ans);
        }
        if(ans==INT_MIN){
        ans=0;
        }
        ans=ans*ans;
        return ans;
    }
};

URL: https://leetcode.com/problems/maximal-square/
