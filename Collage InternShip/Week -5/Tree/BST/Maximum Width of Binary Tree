class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root){
            return 0;
        }
        int ans=0;
        queue<pair<TreeNode*,int>>qu;
        qu.push({root,0});
        while(!qu.empty()){
            int mmin=qu.front().second;
            int n=qu.size();
            int l,r;
            for(int i=0;i<n;i++){
                int cur_id=qu.front().second-mmin;
                TreeNode* node=qu.front().first;
                qu.pop();
                if(i==0){
                    l=cur_id;
                }if(i==n-1){
                    r=cur_id;
                }
                if(node->left){
                        qu.push({node->left,cur_id*2+1});
                }if(node->right){
                        qu.push({node->right,cur_id*2+2});
                }
                
            }
            ans=max(ans,r-l+1);
        }
        return ans;
    }
};


https://leetcode.com/problems/maximum-width-of-binary-tree/
