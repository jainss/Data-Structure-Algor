## Method 1 
Using of two stack's 



class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>ans;
        if(root==NULL){
            return ans;
        }
        stack<TreeNode*>st1;
        stack<TreeNode*>st2;
        TreeNode* node=root;
        st1.push(node);
        while(st1.empty()==false){
            TreeNode* n=st1.top();
            st1.pop();
            if(n->left!=NULL){
                st1.push(n->left);
            }
            if(n->right!=NULL){
                st1.push(n->right);
            }
            st2.push(n);
        }
        while(st2.empty()==false){
            ans.push_back(st2.top()->val);
            st2.pop();
        }
        return ans;
    }
}; 

https://leetcode.com/problems/binary-tree-postorder-traversal/



Using 1 stack 


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>vec;
        if(root==NULL){
            return vec;
        }
        stack<TreeNode*>st1;
        TreeNode* node=root;
        st1.push(node);
        while(st1.empty()==false){
            TreeNode* n=st1.top();
            st1.pop();
            if(n->left!=NULL){
                st1.push(n->left);
            }
            if(n->right!=NULL){
                st1.push(n->right);
            }
           vec.push_back(n->val);
        }
        reverse(vec.begin(),vec.end());
        return vec;
    }
}; 
