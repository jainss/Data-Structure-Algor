/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root==NULL){
            return root;
        }
        queue<Node*>qu;
        qu.push(root);
        while(!qu.empty()){
            int n=qu.size();
            vector<Node*>vec;
            while(n--){
                Node* val=qu.front();
                qu.pop();
                vec.push_back(val);
                if(val->left!=NULL){
                    qu.push(val->left);
                }
                if(val->right!=NULL){
                    qu.push(val->right);
                }
            }
            for(int i=0;i<vec.size();i++){
                if(i==vec.size()-1){
                    vec[i]->next=NULL;
                }else{
                    vec[i]->next=vec[i+1];
                }
            }
        }
        return root;
    }
};

https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/
