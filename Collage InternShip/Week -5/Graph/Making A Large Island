class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int color = 2;
        unordered_map<int, int> sizes;
        for (int i = 0; i < grid.size(); i++)
            for (int j = 0; j < grid[0].size(); j++)
                if (grid[i][j] == 1)
                {
                    int count = 0;
                    colorize(grid, i, j, color, count);
                    sizes[color] = count;
                    color++;
                }
        
        int res = 1; 
        for (auto kv:sizes)
            res = max(res, kv.second);
        
        for (int i = 0; i < grid.size(); i++)
            for (int j = 0; j < grid[0].size(); j++)
                if (grid[i][j] == 0)
                    res = max(res, change(grid, sizes, i, j));
        
        return res;
    }
    
    void colorize(vector<vector<int>>& grid, int i, int j, int color, int& count) {
        count++;
        grid[i][j] = color;
        if (i-1 >=0 && grid[i-1][j] == 1) colorize(grid, i-1, j, color, count);
        if (i+1 < grid.size() && grid[i+1][j] == 1) colorize(grid, i+1, j, color, count);
        if (j-1 >=0 && grid[i][j-1] == 1) colorize(grid, i, j-1, color, count);
        if (j+1 < grid[0].size() && grid[i][j+1] == 1) colorize(grid, i, j+1, color, count);
    }
    
    int change(vector<vector<int>>& grid, unordered_map<int, int>& sizes, int i, int j)
    {
        set<int> neighbors;
        if (i-1 >=0 && grid[i-1][j] > 1) neighbors.insert(grid[i-1][j]);
        if (i+1 < grid.size() && grid[i+1][j] > 1) neighbors.insert(grid[i+1][j]);
        if (j-1 >=0 && grid[i][j-1] > 1) neighbors.insert(grid[i][j-1]);
        if (j+1 < grid[0].size() && grid[i][j+1] > 1) neighbors.insert(grid[i][j+1]);
                                                                
        int res = 1;
        for (int c:neighbors)
            res += sizes[c];
        
        return res;
    }
};

https://leetcode.com/problems/making-a-large-island/
