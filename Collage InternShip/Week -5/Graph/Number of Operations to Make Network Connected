class Solution {
public:
    void dfs(int i, vector<int> adj[], vector<int> &vis){
        vis[i]=1;
        for(auto x: adj[i]){
            if(vis[x]==0){
                dfs(x,adj,vis);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size()<n-1){
            return -1;
        }
        vector<int>adj[n];
        for(int i=0;i<connections.size();i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        int c=0;
        vector<int>vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                c++;
                dfs(i,adj,vis);
            }
        }
        return c-1;
    }
};



https://leetcode.com/problems/number-of-operations-to-make-network-connected/
