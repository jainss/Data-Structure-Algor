class Solution {
public:
    void dfs(vector<vector<int>>&vec,int node,int parent,vector<int>&vis,vector<int>&tin,vector<int>&low,int &timer,vector<int>arr[]){
        vis[node] = 1; 
    tin[node] = low[node] = timer++; 
    for(auto it: arr[node]) {
        if(it == parent) continue;
        
        if(!vis[it]) {
            dfs(vec,it, node, vis, tin, low, timer, arr); 
            low[node] = min(low[node], low[it]); 
            if(low[it] > tin[node]) {
                vector<int> v1;
                v1.push_back(node);
                v1.push_back(it);
                vec.push_back(v1);
            }
        } else {
            low[node] = min(low[node], tin[it]); 
        }
    }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>>vec;
        vector<int>vis(n,0);
        vector<int>low(n,-1);
        vector<int>tin(n,-1);
        vector<int>arr[n];
        for(int x=0;x<connections.size();x++)
        {
            int u=connections[x][0];
            int v=connections[x][1];
            arr[u].push_back(v),
            arr[v].push_back(u);
        }
        int timer=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(vec,i,-1,vis,tin,low,timer,arr);
            }
        }
        return vec;
    }
};
