#include<bits/stdc++.h>
using namespace std;

void dfs(int node,int parent,vector<int>&vis,vector<int>&tin,vector<int>&low,vector<int>&adj,int p){
    vis[node]=1;
    tin[node]=p;
    low[node]=p;
    p++;
    for(auto it:adj[node]){
        if(it==parent){
            continue;
        }
        if(vis[it]==0){
            dfs(it,node,vis,tin,low,adj,p);
            low[node]=min(low[node],low[it]);
            if(low[it]>tin[node]){
                cout<<node<<" "<<it;
            }
        }else{
            low[node]=min(low[node],low[it]);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m; 
	vector<int> adj[n]; 
	for(int i = 0;i<m;i++) {
	    int u, v;
	    cin >> u >> v; 
	    adj[u].push_back(v);
	    adj[v].push_back(u); 
	}
    vector<int> tin(n, -1);
	vector<int> low(n, -1); 
	vector<int> vis(n, 0);
    for(int i=0;i<n;i++){
        if(vis[i]==0){
            dfs(i,-1,vis,tin,low,adj,0);
        }
    }
    return 0;
}
