class Solution {
public:
    vector<int>par;
    vector<int>rank;
    int find(int node){
        if(node==par[node]){
            return node;
        }
        return par[node]=find(par[node]);
    }
    void unionrank(int u,int v){
        u=find(u);
        v=find(v);
        if(rank[u]>rank[v]){
            par[v]=u;
        }else if(rank[v]>rank[u]){
            par[u]=v;
        }else{
            par[u]=v;
            rank[v]++;
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        par.push_back(0);
        for(int i=0;i<edges.size();i++){
            par.push_back(i+1);
        }
        rank.resize(edges.size()+1,1);
        for(int i=0;i<edges.size();i++){
            if(find(edges[i][0])==find(edges[i][1])){
                return {edges[i][0],edges[i][1]};
            }
            unionrank(edges[i][0],edges[i][1]);
        }
        return {};
    }
};


https://leetcode.com/problems/redundant-connection/
