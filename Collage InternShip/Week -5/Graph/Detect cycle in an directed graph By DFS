#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends



class Solution
{
    public:
    
    bool solve(vector<int>&vis,vector<int>&dfsvis,vector<int>adj[],int i){
        vis[i]=1;
        dfsvis[i]=1;
        for(auto it: adj[i]){
            if(!vis[it]){
                if(solve(vis,dfsvis,adj,it)){
                    return true;
                }
            }
            else 
               if(dfsvis[it]){
                    return true;
                }
        }
        dfsvis[i]=0;
        return false;
    }
	//Function to detect cycle in a directed graph.
	bool isCyclic(int V, vector<int> adj[]){
	  vector<int> vis(V,0);
	  vector<int> dfsvis(V,0);
	  for(int i=0;i<V;i++){
	      if(!vis[i]){
	          if(solve(vis,dfsvis,adj,i)){
	              return true;
	          }
	      }
	  }
	  return false;
	}
};

// { Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends
