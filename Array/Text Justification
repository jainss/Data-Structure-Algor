class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        int i=0;
        vector<string>vec;
        while(i<words.size()){
            int j=i+1;
            int sum=words[i].size();
            int cur=0;
            while(j<words.size() and sum+cur+words[j].size()+1<=maxWidth){
                sum+=words[j].size();
                cur++;
                j++;
            }
            string st="";
            int space=(cur==0)?0:(maxWidth-sum)/cur;
            int extra=(cur==0)?0:(maxWidth-sum)%cur;
            if(j==words.size()){
                for(int k=i;k<j;k++){
                    st+=words[k];
                    st+=" ";
                }
                st.pop_back();
            }else{
                for(int k=i;k<j;k++){
                    st+=words[k];
                    if(k==j-1){
                        break;
                    }
                    for(int m=0;m<space;m++){
                        st+=" ";
                    }
                    if(extra){
                        st+=" ";
                        extra--;
                    }
                }
            }
            while(st.size()<maxWidth){
                st+=" ";
            }
            vec.push_back(st);
            i=j;
        }
        return vec;
    }
};


https://leetcode.com/problems/text-justification/
