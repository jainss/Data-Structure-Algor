/*
 * Below is the interface for Iterator, which is already defined for you.
 * **DO NOT** modify the interface for Iterator.
 *
 *  class Iterator {
 *		struct Data;
 * 		Data* data;
 *  public:
 *		Iterator(const vector<int>& nums);
 * 		Iterator(const Iterator& iter);
 *
 * 		// Returns the next element in the iteration.
 *		int next();
 *
 *		// Returns true if the iteration has more elements.
 *		bool hasNext() const;
 *	};
 */

class PeekingIterator : public Iterator {
public:
    list<int> nums;
	PeekingIterator(const vector<int>& num) : Iterator(num) {
        for(auto it:num){
            nums.push_back(it);
        }
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	int peek() {
        return nums.front();
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	int next() {
	    int val=nums.front();
        nums.pop_front();
        return val;
	}
	
	bool hasNext() const {
	    if(nums.size()==0)
            return false;
        return true;
	}
    
};

https://leetcode.com/problems/peeking-iterator/
