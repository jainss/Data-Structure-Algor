#include<bits/stdc++.h>
using namespace std;

int main(){
    int n,m;
    cin>>n>>m;
    int **arr=new int *[n];
    for(int i=0;i<n;i++){
       arr[i]=new int[m];
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>arr[i][j];
        }
    }
    int minr=0,minc=0,maxc=m-1,maxr=n-1;
    int tne=m*n;
    int c=0;
    while(c<tne){
        //left wall
        for(int i=minr,j=minc;i<=maxr&&c<tne;i++){
            cout<<arr[i][j]<<endl;
            c++;
        }
        minc++;
        //bottom wall
        for(int i=maxr,j=minc;j<=maxc&&c<tne;j++){
            cout<<arr[i][j]<<endl;
            c++;
        }
        maxr--;
        //upper wall
        for(int i=maxr,j=maxc;i>=minr&&c<tne;i--){
            cout<<arr[i][j]<<endl;
            c++;
        }
        maxc--;
        //right wall
        for(int i=minr,j=maxc;j>=minc&&c<tne;j--){
            cout<<arr[i][j]<<endl;
            c++;
        }
        minr++;
    }
    return 0;
}



##Letcode


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int minc=0,minr=0,maxc=matrix[0].size()-1,maxr=matrix.size()-1;
        int tne=matrix.size()*matrix[0].size();
        int c=0;
        vector<int>vec;
        while(c<tne){
            for(int i=minr,j=minc;j<=maxc&&c<tne;j++){
                vec.push_back(matrix[i][j]);
                c++;
            }
            minr++;
            for(int i=minr,j=maxc;i<=maxr&&c<tne;i++){
                vec.push_back(matrix[i][j]);
                c++;
            }
            maxc--;
            for(int i=maxr,j=maxc;j>=minc&&c<tne;j--){
                 vec.push_back(matrix[i][j]);
                c++;
            }
            maxr--;
            for(int i=maxr,j=minc;i>=minr&&c<tne;i--){
                 vec.push_back(matrix[i][j]);
                c++;
            }
            minc++;
        }
        return vec;
    }
};
