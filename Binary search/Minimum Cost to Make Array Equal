Method -1
Binary Search 
O(nlogn)
O(1)


class Solution {
public:
    long long getSum(vector<int>& nums, vector<int>& cost,int mid){
         long long sum = 0;
            for(int i =0;i<nums.size();i++){
                long long k = abs(nums[i]-mid);
                sum+= k*cost[i];  
            }   return sum;
    }
    long long minCost(vector<int>& nums, vector<int>& cost) {
        long long lo = 1,hi=1e6;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            long long sum1 = getSum(nums,cost,mid);
            if(lo==hi)return sum1;
             long long sum3 = getSum(nums,cost,mid+1);
             long long sum2 = getSum(nums,cost,mid-1);
          
            if(sum2>=sum1 && sum1<=sum3)return sum1; 
            if(sum2<sum1){
                hi = mid;
                continue; } 
            if(sum3<sum1){
                lo = mid;
                continue;
            }
        }
        
        return 0;   
    }
};


Method -2

O(N)
O(N)


class Solution {
public:
    long long getSum(vector<int>& nums, vector<int>& cost,int mid){
         long long sum = 0;
            for(int i =0;i<nums.size();i++){
                long long k = abs(nums[i]-mid);
                sum+= k*cost[i];  
            }   return sum;
    }
    long long minCost(vector<int>& nums, vector<int>& cost) {
        vector<pair<int,int>>vp;
        long long n=cost.size(),sum=0;
        for(int i=0;i<n;i++){
            vp.push_back({nums[i],cost[i]});
            sum+=cost[i];
        }
        sort(vp.begin(),vp.end());
        long long i=0,medium=0,coun=0;
        while(coun<((sum+1)/2) and i<n){
            coun+=vp[i].second;
            medium=vp[i].first;
            i++;
        }
        return getSum(nums,cost,medium);   
    }
};






https://leetcode.com/problems/minimum-cost-to-make-array-equal/
