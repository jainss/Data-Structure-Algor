Approach -1 
  TC : O(N^2) Wrost Case 
  SC : O (N) 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getDashLen(string &traversal, int &pos, int &n){
        int dash_len = 0;
        while(pos<n and traversal[pos]=='-'){
            dash_len++;
            pos++;
        }
        return dash_len;
    }
    int getval(string &traversal, int &pos, int &n){
        int val = 0;
        while(pos<n and traversal[pos]>='0' and traversal[pos]<='9'){
            val = val*10 + (traversal[pos]-'0');
            pos++;
        }
        return val;
    }
    void buildTree(TreeNode* curr, int expdepth, string &traversal, int &pos, int &n){
        if(pos == n){
            return ;
        }
        int prePos = pos;
        int depth = getDashLen(traversal, pos, n);
        if(depth<expdepth){
            pos = prePos;
            return ;
        }
        int node_val = getval(traversal, pos, n);
        TreeNode* newNode = new TreeNode(node_val);
         cout<<newNode->val;
        if(!curr->left){
            curr->left= newNode;
        }else{
            curr->right = newNode;
        }
        buildTree(newNode, expdepth+1, traversal, pos, n);
        buildTree(newNode, expdepth+1, traversal, pos, n);
    }

    TreeNode* recoverFromPreorder(string traversal) {
        int n = traversal.size();
        int pos =0;
        TreeNode *root = new TreeNode(getval(traversal, pos, n));

        buildTree(root, 1, traversal, pos, n);
        buildTree(root, 1, traversal, pos, n);
        return root;
    }
};


Approach 2:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string traversal) {
        vector<TreeNode*> stack;
        int i = 0;
        while(i < traversal.length()) {
            int level = 0, val = 0;
            while(traversal[i] == '-') {
                i++;
                level++;
            }
            while(i < traversal.length() && traversal[i] != '-') {
                val = val*10 + traversal[i] - '0';
                i++;
            }

            TreeNode* node = new TreeNode(val);
            while(stack.size() > level) stack.pop_back();
            if(!stack.empty()) {
                if(!stack.back()->left) stack.back()->left = node;
                else stack.back()->right = node;
            }
            stack.push_back(node);
        }
        return stack[0];
    }
};


