class Solution {
public:
  
    int reversePairs(vector<int>& nums) {
       int inve= mergesort(nums,0,nums.size()-1);
        return inve;
    }
    int mergesort(vector <int>& nums, int left,int right)
    {   if(left>=right)
            return 0;
        int mid = (left+right)/2;
        int inve=mergesort(nums,left,mid);
        inve+=mergesort(nums,mid+1,right);
        inve+=merge(nums,left,mid,right);
        return inve;
    }
    int merge(vector <int> &nums, int left,int mid,int right)
    {  
        int size1= mid-left+1;
        int size2= right-mid;
        int arr1[size1],arr2[size2];
        for(int i=0;i<size1;i++)
            arr1[i]=nums[left+i];
        for(int i=0;i<size2;i++)
            arr2[i]=nums[mid+1+i];
        //inversion logic
        int inve=0;
        int i=0;
        int j=0;
        for(i=0;i<size1;i++) //main inversion count logic time O(n+m) =>O(N)
        {
            while(j<size2 && (double(arr1[i])/2)>double(arr2[j])) //if we use 2*arr2[j] will give int overflow
            {
                j++;
            }
            inve+=j; //add j for each element.
        }
        
        
        
        i=0;
        j=0;
        int k=left;
        
        while(i<size1 && j<size2)
        {   
            if(arr1[i]<=arr2[j]){
                nums[k]=arr1[i];
                k++;
                i++;
            }
            else
            { 
           int z = 
               nums[k]=arr2[j];
                k++;
                j++;
    
            }
        }
       while(j<size2)
       {  nums[k++]=arr2[j++];}
        while(i<size1)
       {  nums[k++]=arr1[i++];}
        return inve;
    }    
    
};


https://leetcode.com/problems/reverse-pairs/
