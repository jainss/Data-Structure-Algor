class Solution {
public:
    long long int ans=0;
    void merge(vector<int>&nums,int l,int e){
        int mid=l+(e-l)/2;
        int l1=mid-l+1;
        int l2=e-mid;
        int v1[l1];
        int v2[l1];
        for(int i=0;i<l1;i++){
            v1[i]=nums[i+l];
        }
        for(int i=0;i<l2;i++){
            v2[i]=nums[i+mid+1];
        }
        int idx1=0,idx2=0;
        int k=l;
        while(idx1<(l1) and idx2<(l2)){
            if(v1[idx1]<=v2[idx2]){
                nums[k++]=v1[idx1++];
            }else{
                ans+=(l1-idx1);
                nums[k++]=v2[idx2++];
            }
        }
        while(idx1<l1){
            nums[k++]=v1[idx1++];
        }
        while(idx2<l2){
            nums[k++]=v2[idx2++];
        }
    }
    void mergesort(vector<int>&nums,int l,int e){
        if(l>=e){
            return ;
        }
        int mid=l+(e-l)/2;
        mergesort(nums,l,mid);
        mergesort(nums,mid+1,e);
        merge(nums,l,e);
    }
    bool isIdealPermutation(vector<int>& nums) {
        if(nums.size()<2)
            return 1;
         int c=0;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>nums[i+1]){
                c++;
            }
        }
        mergesort(nums,0,nums.size()-1);
        return ans==c;
    }
};

https://leetcode.com/problems/global-and-local-inversions/
