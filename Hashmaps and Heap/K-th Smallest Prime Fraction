class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
       int n = arr.size();
        if(n == 2)return {arr[0], arr[1]};
        priority_queue<pair<double, pair<int, int>>, vector<pair<double, pair<int, int>>> , greater<pair<double,pair<int,int>>>> q;
        for(int i = 0; i < n-1; i++)
        {
            for(int j = i+1; j<n; j++)
            {
                double f = double(arr[i])/double(arr[j]);
                q.push({f, {arr[i], arr[j]}});
            }
        }
        while(k!=0 && !q.empty()){
            auto temp = q.top();
            q.pop();
            k--;
            if(k==0)return {temp.second.first, temp.second.second};
        }
        return {0,0};
    }
};

https://leetcode.com/problems/k-th-smallest-prime-fraction/ 
