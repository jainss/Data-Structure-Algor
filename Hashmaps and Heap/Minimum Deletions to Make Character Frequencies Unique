Mthod-1 
TC :O(Logn)

class Solution {
public:
    int minDeletions(string s) {
        vector<int>vec(26,0);
        for(auto it:s){
            vec[it-'a']++;
        }
        sort(vec.begin(),vec.end(),greater<int>());
        int mx=vec[0],ans=0;
        cout<<mx<<endl;
        for(auto it:vec){
            if(it>mx){
                // cout<<it<<endl;
                if(mx>0){
                    ans+=it-mx;
                }else{
                    ans+=it;
                }
            }
            mx=min(mx-1,it-1);
        }
        return ans;
    }
};


Method -2
TC: O(N);
TC: O(N);


class Solution {
public:
    int minDeletions(string s) {
        map<char,int>chrmp;
        map<int,int>fremp;
        for(int i=0;i<s.size();i++){
            chrmp[s[i]]++;
        }
        int c=0;
        for(auto it:chrmp){
            int val=it.second;
            while(val>0 and fremp[val]!=0){
                c++;
                val--;
            }
            if(val>0){
                fremp[val]++;
            }
        }
        return c;
    }
};

https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/
