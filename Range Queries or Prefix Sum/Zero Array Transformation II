TC : O(nlog*n*logn)
SC : O(N);

class Solution {
public:
    bool isZeroArray(vector<int>nums, vector<vector<int>>& queries, int k) {
        vector<int>diff(nums.size()+1,0);
        for(int i=0;i<=k;i++){
            diff[queries[i][0]]-=queries[i][2];
            diff[queries[i][1]+1]+=queries[i][2];
        }
        int sum =0;
        for(int i =0;i<nums.size();i++){
            sum += diff[i];
            if(nums[i]>0){
             nums[i]+=sum;
            }
            if(nums[i]>0){
                return false;
            }
        }
        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n = queries.size();
        long long int sum =0;
        for(auto it: nums){
            cout<<it<<endl;
            sum += it;
        }
        if(!isZeroArray(nums, queries, n-1)){
           return -1;
        }
        cout<<sum<<" "<<endl;
        if(sum==0){
            return 0;
        }
        int i =0,j=n-1;
        while(i<j){
            int mid = i+(j-i)/2;
            if(isZeroArray(nums, queries, mid)){
                j =mid;
            }else{
                i=mid+1;
            }
        }
        return j+1;
    }
};


https://leetcode.com/problems/zero-array-transformation-ii/
