class Solution {
public:
    int minOperations(vector<int>& nums, vector<int>& nd) {
        int gcd=nd[0];
        for(int i=1;i<nd.size();i++){
            gcd=__gcd(gcd,nd[i]);
        }
        vector<int>demo;
        for(int i=1;i*i<=gcd;i++){
            if(gcd%i==0){
                demo.push_back(i);
                demo.push_back(gcd/i);
            }
        }    
        sort(demo.begin(),demo.end());
        sort(nums.begin(),nums.end());
        int f=0,c=0;
        for(auto it:demo){
            while(f<nums.size() and nums[f]<it){
                c++;
                f++;
            }
            if(f<nums.size() and nums[f]==it){
                return c;
            }
        }
        return -1;
    }
};



https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/
