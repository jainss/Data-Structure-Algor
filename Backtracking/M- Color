#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends



//Function to determine if graph can be coloured with at most M colours such
//that no two adjacent vertices of graph are coloured with same colour.
bool issafe(int Node,bool graph[101][101],int color[],int V,int col){
    for(int i=0;i<V;i++){
        if(graph[i][Node]==1&&i!=Node&&color[i]==col){
            return false;
        }
    }
    return true;
}

bool solve(int Node,bool graph[101][101],int color[],int m,int V){
    if(Node==V){
        return true;
    }
   for(int i=1;i<=m;i++){
       if(issafe(Node,graph,color,V,i)){
           color[Node]=i;
           if(solve(Node+1,graph,color,m,V)){
               return true;
           }
           color[Node]=0;
       }
   }    
   return false;
}

bool graphColoring(bool graph[101][101], int m, int V){
   int color[V]={0};
   if(solve(0,graph,color,m,V)==true){
       return true;
   }
   return false;
}

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        cout << graphColoring(graph, m, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
