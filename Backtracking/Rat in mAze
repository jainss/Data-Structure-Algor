// Initial template for C++
//Method 1;


#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    void solve(vector<string>&ans,vector<vector<int>>m,int i,int j,int n,vector<vector<int>>vis,string st){
        if(i==n-1&&j==n-1){
            ans.push_back(st);
            return ;
        }
        if(i+1<n&&vis[i+1][j]==0&&m[i+1][j]==1){
            vis[i][j]=1;
            solve(ans,m,i+1,j,n,vis,st+'D');
            vis[i][j]=0;
        }
        if(j-1>=0&&vis[i][j-1]==0&&m[i][j-1]==1){
            vis[i][j]=1;
            solve(ans,m,i,j-1,n,vis,st+'L');
            vis[i][j]=0;
        }
        if(j+1<n&&vis[i][j+1]==0&&m[i][j+1]==1){
            vis[i][j]=1;
            solve(ans,m,i,j+1,n,vis,st+'R');
            vis[i][j]=0;
        }
        if(i-1>=0&&vis[i-1][j]==0&&m[i-1][j]==1){
            vis[i][j]=1;
            solve(ans,m,i-1,j,n,vis,st+'U');
            vis[i][j]=0;
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        vector<vector<int>>vis(n,vector<int>(n,0));
        if(m[0][0]==1)solve(ans,m,0,0,n,vis,"");
        sort(ans.begin(),ans.end());
        return ans;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends









// method 2





// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    void solve(vector<string>&ans,vector<vector<int>>m,int i,int j,int n,vector<vector<int>>vis,string st,int di[],int dj[]){
        if(i==n-1&&j==n-1){
            ans.push_back(st);
            return ;
        }
        string str="DLRU";
        for(int ii=0;ii<4;ii++){
            int ci=i+di[ii];
            int cj=j+dj[ii];
            if(ci>=0&&cj>=0&&ci<n&&cj<n&&vis[ci][cj]==0&&m[ci][cj]==1){
                vis[i][j]=1;
                solve(ans,m,ci,cj,n,vis,st+str[ii],di,dj);
                vis[i][j]=0;
            }
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        vector<vector<int>>vis(n,vector<int>(n,0));
        int di[]={+1,0,0,-1};
        int dj[]={0,-1,+1,0};
        if(m[0][0]==1)solve(ans,m,0,0,n,vis,"",di,dj);
        sort(ans.begin(),ans.end());
        return ans;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
